package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import futsalManager.FutsalField;
import futsalManager.Manager;
import futsalManager.Reservation;
import util.DBUtil;

public class ManagerDAO {

	public Manager loginAsManagerDAO(String id, String pw) throws SQLException {
		Manager manager = null;
		Connection connection = DBUtil.getConnection();
		PreparedStatement statement = connection.prepareStatement("select * from Manager Where login_id =? && login_pw=?;");
		statement.setString(1,id);
		statement.setString(2,pw);
		ResultSet resultSet = statement.executeQuery();
		try (connection; statement; resultSet;)
		{
			// resultSet.next() -> 값이 들어오면, true
				resultSet.next();  // resultSet을 가지고 원하는 값들을 넣어줘서 보냄
				int member_id = resultSet.getInt("manager_id");
				String login_id = resultSet.getString("login_id");
				String login_pw = resultSet.getString("login_pw");
				String phoneNum = resultSet.getString("phoneNum");
				String name = resultSet.getString("manager_name");
		
			
		manager = new Manager(member_id,  login_id, login_pw, phoneNum, name); 
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		}
	
		return manager;
}
	

	public void cancelReservationDAO(int reservation_id) throws SQLException {
		//해당 id를 가진 예약을 강제 취소시키는 메서드
		Connection connection = DBUtil.getConnection();
		PreparedStatement statement = connection.prepareStatement("UPDATE Reservation SET status = 1 WHERE reservation_id= ?;");
		statement.setInt(1, reservation_id);
		statement.executeQuery();
		try (connection; statement;)
		{
		
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		}
	}


	public List<Reservation> checkReservationDAO(int get_futsal_id) throws SQLException {
		//내 풋살장마다의 예약 현황
		List<Reservation> reserveList = new ArrayList<>();
		Connection connection = DBUtil.getConnection();
		PreparedStatement statement = connection.prepareStatement("SELECT * FROM Reservation WHERE futsal_id = ?;");
		statement.setInt(1, get_futsal_id);
		ResultSet resultSet =  statement.executeQuery();
		try (connection; statement;)
		{
		
		
		while(resultSet.next()) {
		 // resultSet을 가지고 원하는 값들을 넣어줘서 보냄
			int reservation_id = resultSet.getInt("reservation_id");
			int member_id = resultSet.getInt("member_id");
			int futsal_id = resultSet.getInt("futsal_id");
			int status = resultSet.getInt("status");
			LocalDate reserve_date = (resultSet.getDate("reservation_date")).toLocalDate();
			int reserve_time = resultSet.getInt("reservation_time");
	
			reserveList.add(new Reservation(reservation_id, member_id, futsal_id, status, reserve_date, reserve_time));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		}
		return reserveList;
		
		// TODO Auto-generated method stub
		
	}


	public void deleteFutsalFieldDAO(int get_futsal_id) throws SQLException {
		
		Connection connection = DBUtil.getConnection();
		PreparedStatement statement = connection.prepareStatement("DELETE FROM FutsalField WHERE futsal_id = ?;");
		statement.setInt(1, get_futsal_id);
		ResultSet resultSet =  statement.executeQuery();
		try (connection; statement;)
		{
		
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		}
	}

	// 내가 관리하고 있는 풋살장의 이름, 수용 인원 등 변경
	public void updateFutsalFieldDAO(FutsalField futsal_field) throws SQLException {
		int futsal_id = futsal_field.getFutsal_id();
		String futsal_name = futsal_field.getFutsal_name();
		int capacity = futsal_field.getCapacity();
		
		Connection connection = DBUtil.getConnection();
		PreparedStatement statement = connection.prepareStatement("UPDATE FutsalField SET capacity = ?, fusal_name =? WHERE futsal_id = ?;");
		statement.setInt(1, capacity);
		statement.setString(2, futsal_name);
		statement.setInt(3, futsal_id);
		ResultSet resultSet =  statement.executeQuery();
		
	}


	public void addFutsalFieldDAO(FutsalField futsal_field) throws SQLException {
	
		int manager_id = futsal_field.getManager_id();
		int capacity = futsal_field.getCapacity();
		String futsal_name = futsal_field.getFutsal_name();
		
		Connection connection = DBUtil.getConnection();
		PreparedStatement statement = connection.prepareStatement(
				"INSERT INTO FutsalField (manager_id, capacity, futsal_name) "
				+ "Values(?,?,?);"
						);
		statement.setInt(2, manager_id);
		statement.setInt(3, capacity);
		statement.setString(4, futsal_name);
		
		ResultSet resultSet =  statement.executeQuery();
	}

	

}
